uvicorn main:app --reload

web: gunicorn main:application --workers=4 --worker-class=uvicorn.workers.UvicornWorker

Response
Класс fastapi.Response является базовым для остальных классов ответа. Его преимуществом является то, что он позволяется также отправить ответ, который не покрывается встроенными классами, например, в каком-то нестандартном формате. Для отпределения ответа конструктор класса принимает следующие параметры:
content: задает отправляемое содержимое
status_code: задает статусный код ответа
media_type: задает MIME-тип ответа
headers: задает заголовки ответа


Path, Body, Field, 
Дополнительно для работы с параметрами пути фреймворк FastAPI предоставляет класс Path из пакета fastapi. Класс Path позволяет валидировать значения параметров. В частности, через конструктор Path можно установить следующие параметры для валидации значений:
min_length: устанавливает минимальное количество символов в значении параметра
max_length: устанавливает максимальное количество символов в значении параметра
regex: устанавливает регулярное выражение, которому должно соответствовать значение параметра
lt: значение параметра должно быть меньше определенного значения
le: значение параметра должно быть меньше или равно определенному значению
gt: значение параметра должно быть больше определенного значения
ge: значение параметра должно быть больше или равно определенному значению
Применим некотрые параметры:
from fastapi import FastAPI, Path
app = FastAPI()
@app.get("/users/{name}")
def users(name:str  = Path(min_length=3, max_length=20)):
    return {"name": name}

Одной из расспространненых задач в веб-приложении является отправка статусных кодов, которые указывают на статус выполнения операции на сервере.
1xx: предназначены для информации. Ответ с таким кодом не может иметь содержимого
2xx: указывает на успешноее выполнение операции
3xx: предназначены для переадресации
4xx: предназначены для отправки информации об ошибок клиента
5xx: предназначены для информации об ошибках сервера
По умолчанию функции обработки отправляют статусный код 200, но при необходимости мы можем отправить любой статусный код. Для этого у методов get(), post(), put(), delete(), options(), head(), patch(), trace() в классе FastAPI применяется параметр status_code, который принимает числовой код статуса HTTP.

Для упрощения в FastAPI есть модуль status, в котором определены константы для представления статусных кодов:
HTTP_100_CONTINUE (код 100)
HTTP_101_SWITCHING_PROTOCOLS (код 101)
HTTP_102_PROCESSING (код 102)
...
https://metanit.com/python/fastapi/1.7.php#:~:text=%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%20%D0%BD%D0%B5%20%D0%BD%D0%B0%D0%B9%D0%B4%D0%B5%D0%BD.-,%D0%94%D0%BB%D1%8F,-%D1%83%D0%BF%D1%80%D0%BE%D1%89%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20FastAPI


https://github.com/nsidnev/fastapi-realworld-example-app
https://github.com/testdrivenio/fastapi-crud-async/tree/master/src/app/api

https://github.com/zhanymkanov/fastapi-best-practices#1-project-structure-consistent--predictable